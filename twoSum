package org.vincent.twosum;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @question
 *Given an array of integers, find two numbers such that they add up
 *to a specific target number. The function twoSum should return
 *indices of the two numbers such that they add up to the target,
 *where index1 must be less than index2. Please note that your
 *returned answers (both index1 and index2) are not zero-based. You
 *may assume that each input would have exactly one solution. Input:
 *numbers={2, 7, 11, 15}, target=9 Output: index1=1, index2=2
 *第一种方法n*n的时间复杂度不符合要求； 第二种方法先排序，再做一次O(n)的遍历；
 *之前想尝试不通过排序，模拟快速排序直接在n*logn的时间复杂度内解决问题，后来发现无法找到正确的指针(l, r)移动方法。
 *第三种方法使用了hash，虽然时间复杂度为O(n),但是增加了计算量和空间。其思路是将target和数组中每个元素的差值索引到map，
 *然后通过遍历数组找到和差值相同的元素。
 * @author Vincent
 * @date 2014-10-11
 * 
 */
public class TwoSum {

	public static void main(String[] args) {
		int[] a = { 3, 2, 4 };
		int target = 6;
		TwoSum sum = new TwoSum();
		int[] result = sum.twoSum3(a, target);
		System.out.println(result[0] + ";" + result[1]);
	}

	/**
	 * O(n*n)
	 * 
	 * @param numbers
	 * @param target
	 * @return
	 */
	public int[] twoSum(int[] numbers, int target) {
		int[] result = new int[2];
		for (int i = 0; i < numbers.length; i++) {
			for (int j = i + 1; j < numbers.length; j++) {
				if (numbers[i] + numbers[j] == target) {
					result[0] = i + 1;
					result[1] = j + 1;
					break;
				}
			}
		}
		return result;
	}

	/**
	 * O(n*logn)
	 * 
	 * @param numbers
	 * @param target
	 * @return
	 */
	public int[] twoSum2(int[] numbers, int target) {
		List<MyElement> elements = new ArrayList<MyElement>(numbers.length);
		for (int i = 0; i < numbers.length; i++) {
			MyElement vector = new MyElement();
			vector.index = i + 1;
			vector.value = numbers[i];
			elements.add(vector);
		}
		Collections.sort(elements);
		int l = 0;
		int r = numbers.length - 1;
		int[] result = new int[2];
		while (l < r) {
			int sum = elements.get(l).value + elements.get(r).value;
			if (sum == target) {
				result[0] = Math.min(elements.get(l).index,
						elements.get(r).index);
				result[1] = Math.max(elements.get(l).index,
						elements.get(r).index);
				break;
			} else if (sum > target) {
				r--;
			} else {
				l++;
			}
		}
		return result;
	}

	private class MyElement implements Comparable<MyElement> {
		int index;
		int value;

		@Override
		public int compareTo(MyElement o) {
			return value - o.value;
		}
	}

	/**
	 * O(n)
	 * 
	 * @param numbers
	 * @param target
	 * @return
	 */
	public int[] twoSum3(int[] numbers, int target) {
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 0; i < numbers.length; i++) {
			map.put(target - numbers[i], i + 1);
		}
		int[] result = new int[2];
		int i;
		for (i = 0; i < numbers.length; i++) {
			if (map.containsKey(numbers[i]) && (i != map.get(numbers[i]) - 1)) {
				break;
			}
		}
		result[0] = Math.min(i + 1, map.get(numbers[i]));
		result[1] = Math.max(i + 1, map.get(numbers[i]));
		return result;
	}


}
